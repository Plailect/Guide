---
title: "OTP Info"
permalink: /otp-info.html
lang: de_DE
ref: otp-info
---

Das OTP ist eine 0x100 byte große Region von zufällig scheinenden Daten an der Adresse 0x10012000. Es wird vermutet, dass die eindeutigen Schlüssel der Konsole aus dieser Region abgeleitet werden. Aktuell ist jedoch unbekannt wie genau. Diese Region ist wahrscheinlich der einzigartige Datenspeicher der Konsole, welcher von der Boot-ROM entschlüsselt wird. Wir wissen jedoch nicht, wie das gemacht wird, bis jemand die komplett geschützte Boot-ROM dumpt. Zu diesem Zeitpunkt ist es nicht bekannt, ob jemand die geschützte Boot-ROM erfolgreich gedumpt hat.

Vor der Version 3.0.0-X war die 0x10012000-Region (das OTP) ungeschützt und konnte vom Angreifer mit ausreichenden Rechten (arm9 Code Ausführung) gedumpt werden.

Nach der Version 3.0.0-X wechselte Nintendo dazu, diese Region mit Hilfe des CFG_SYSPROT9-Registers zu sperren. Dieses Register sperrt auch den Bootloader und wird sehr früh während des Boot-Prozesses gesetzt, noch lange bevor wir Code Ausführungsrechte erhalten können. Das Register kann genau einmal gesetzt werden und kann nicht deaktiviert werden bis die Konsole ganz ausgeschalten ist, somit ist es unmöglich das ganze OTP ohne eine Version vor 3.0.0-X zu dumpen.

Jedoch gibt es in der Version 9.6.0-X eine Methode den Hash des OTP zu dumpen. Weil der Kernel9Loader das SHA_HASH-Register nach Benutzung nicht löscht, liefert das Dumpen von SHA_HASH den Hash des OTP, welcher dem Kernel9 vom Kernel9Loader übergeben wird. Zusätzlich gibt eine lang-existierende Schwachstelle, wo ein MCU Neustart, verursacht durch das i2c, nicht den RAM löscht, wie es eigentlich passieren sollte.

Dies erlaubt einen hardwarebasierten Angriff bei dem beliebige Daten in den Sektor nand_sector96+0x10 in ein SysNAND Backup geschrieben und dann geflasht werden. Afterwards we wire the i2c to MCU reboot on our command, write a payload (which will write 0x1000A040 - 0x1000A060 to a file on the SD card) to arm9 memory somewhere, fill all memory with a NOP sled followed by a JMP instruction pointing to the payload. Wir können dann wiederholend MCU Neustarten (wobei wir nand_sector96+0x10 jedes mal um 1 erhöhen), bis der Kernel9Loader dann zufälligerweise zum Payload springt.

Because of the complexity and extra hardware involved in the method described above, I have decided to limit the scope of this guide strictly to the software based approach of downgrading to a version below 3.0.0-X. Version 2.1.0-X was selected because it is the only version below 3.0.0-X that contains a fully exploitable browser version (2.0.0-X has a partially exploitable browser, but it won't work for other reasons).

This process involves flashing your CTRNAND to 2.1.0-4. This is accomplished by installing a premade CTRNAND image containing 2.1.0, copying your console specific files (such as `moveable.sed` and `SecureInfo_A`) to it, then fixing the title database CMACS. On New 3DS, it also swaps CTRNAND's encryption slot and installs an Old 3DS NCSD header to NAND, allowing it to boot the Old 3DS only 2.1.0 software.