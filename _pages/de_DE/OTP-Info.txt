---
title: "OTP Info"
permalink: /otp-info.html
lang: de_DE
ref: otp-info
---

Das OTP ist eine 0x100 byte große Region von zufällig scheinenden Daten an der Adresse 0x10012000. Es wird vermutet, dass die eindeutigen Schlüssel der Konsole aus dieser Region abgeleitet werden. Aktuell ist jedoch unbekannt wie genau. Diese Region ist wahrscheinlich der einzigartige Datenspeicher der Konsole, welcher von der Boot-ROM entschlüsselt wird. Wir wissen jedoch nicht, wie das gemacht wird, bis jemand die komplett geschützte Boot-ROM dumpt. Zu diesem Zeitpunkt ist es nicht bekannt, ob jemand die geschützte Boot-ROM erfolgreich gedumpt hat.

Vor der Version 3.0.0-X war die 0x10012000-Region (das OTP) ungeschützt und konnte vom Angreifer mit ausreichenden Rechten (arm9 Code Ausführung) gedumpt werden.

Nach der Version 3.0.0-X wechselte Nintendo dazu, diese Region mit Hilfe des CFG_SYSPROT9-Registers zu sperren. Dieses Register sperrt auch den Bootloader und wird sehr früh während des Boot-Prozesses gesetzt, noch lange bevor wir Code Ausführungsrechte erhalten können. Das Register kann genau einmal gesetzt werden und kann nicht deaktiviert werden bis die Konsole ganz ausgeschalten ist, somit ist es unmöglich das ganze OTP ohne eine Version vor 3.0.0-X zu dumpen.

Jedoch gibt es in der Version 9.6.0-X eine Methode den Hash des OTP zu dumpen. Weil der Kernel9Loader das SHA_HASH-Register nach Benutzung nicht löscht, liefert das Dumpen von SHA_HASH den Hash des OTP, welcher dem Kernel9 vom Kernel9Loader übergeben wird. Zusätzlich gibt eine lang-existierende Schwachstelle, wo ein MCU Neustart, verursacht durch das i2c, nicht den RAM löscht, wie es eigentlich passieren sollte.

Dies erlaubt einen hardwarebasierten Angriff bei dem beliebige Daten in den Sektor nand_sector96+0x10 in ein SysNAND Backup geschrieben und dann geflasht werden. Danach verkabeln wir den i2c zu einem MCU Neustart auf unseren Befehl hin, schreiben einen Payload (welcher wird 0x1000A040-0x1000A060 in eine Datei auf unserer SD-Karte schreiben) irgendwo in den Speicher des arm9, füllen den restlichen Speicher mit einem NOP sled gefolgt von einer JMP Anweisung die zu dem Payload hinführt. Wir können dann wiederholend MCU Neustarten (wobei wir nand_sector96+0x10 jedes mal um 1 erhöhen), bis der Kernel9Loader dann zufälligerweise zum Payload springt.

Aufgrund der Komplexität und der extra benötigten Hardware in der oben beschriebenen Methode, habe ich mich dazu entschieden, diesen Guide strikt auf die Software Variante des Downgrades auf eine Version unter 3.0.0-X zu beschränken. Version 2.1.0-X wurde ausgewählt, da es die einzige Version unter 3.0.0-X ist, welche einen komplett exploitbaren Browser enthält (2.0.0-X hat einen teilweise exploitbaren Browser, aber es funktioniert aus anderen Gründen nicht).

Dieser Prozess involviert das Flashen deines CTRNANDs zu 2.1.0-4. Dies wird durch das installieren eines vorgefertigten CTRNAND Abbildes mit Version 2.1.0, das Kopieren von konsolen-spezifischen Dateien (wie "moveable.sed" und "moveable.sed") und das anschließende Fixen der "title database" CMACS erreicht. Auf dem New 3DS wird außerdem der Verschlüsselungs-Slot des CTRNAND getauscht und ein Old 3DS NCSD Header in das NAND installiert. Dies erlaubt dem New 3DS die Old 3DS exklusive 2.1.0 Software zu booten.