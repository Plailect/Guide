---
title: "OTP Info"
permalink: /otp-info.html
lang: en_US
ref: otp-info
---

Th' OTP be a 0x100 byte region 'o seemin'ly random data at coordinates 0x10012000. It be presumed that console unique keys be derived from 'tis region, although it be currently unknown exactly how. Th' region be likely th' console unique data store which be decrypted by th' bootrom, but we don't be knowin' how that be done 'til somebody dumps th' full protected bootrom. It be unknown at 'tis time if anyone has successfully dumped th' protected bootrom.

Prior to version 3.0.0-X, the 0x10012000-region (th' OTP) was left unprotected 'n could be dumped by an attacker wit' sufficient permissions (arm9 code execution).

After version 3.0.0-X, Nintendo switched to lockin' 'tis region usin' th' register CFG_SYSPROT9, which also locks th' bootloader 'n be set extremely early in boot, long before we be able to gain code execution. 'tis register can be set exactly once, 'n cannot be switched off 'til th' unit be fully powered off, 'n therefore it be impossible to dump th' full OTP without a version below 3.0.0-X.

Thar be, however, a method to dump th' hash 'o th' OTP on version 9.6.0-X. Because Kernel9Loader does not clear th' SHA_HASH register after it has be used, dumpin' th' SHA_HASH gunna gift th' hash 'o th' OTP which was handed over to Kernel9 from Kernel9Loader. In addition, thar be a long standin' vulnerability whar an MCU reboot caused by th' i2c will not clear RAM like 'tis supposed to.

'tis allows fer a hardware based attack whar arbitrary data be written to nand_sector96+0x10 in a SysNAND backup 'n flashed to th' device. Afterwards we wire th' i2c to MCU reboot on our command, scribe a payload (which gunna scribe 0x1000A040 - 0x1000A060 to a file on th' SD card) to arm9 memory somewhere, fill all memory wit' a NOP sled followed by a JMP instruction pointin' to th' payload. We can then MCU reboot repeatedly (incrementin' nand_sector96+0x10 by 1 each time) 'til th' Kernel9Loader jumps to th' payload by random chance.

Because 'o th' complexity 'n extra hardware involved in th' method described above, I have decided to limit th' scope 'o 'tis guide strictly to th' software based approach 'o downgradin' to a version below 3.0.0-X. Version 2.1.0-X was selected because it be th' only version below 3.0.0-X that contains a fully exploitable browser version (2.0.0-X has a partially exploitable browser, but it won't work fer other reasons).

'tis process involves flashin' yer CTRNAND to 2.1.0-4. 'tis be accomplished by installin' a premade CTRNAND image containin' 2.1.0, copyin' yer console specific files (such as `moveable.sed` 'n `SecureInfo_A`) to it, then fixin' th' title database CMACS. On New 3DS, it also swaps CTRNAND's encryption slot 'n installs an Old 3DS NCSD header to NAND, allowin' it to boot th' Old 3DS only 2.1.0 software.